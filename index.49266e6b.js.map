{"mappings":"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","sources":["src/demo/components/demo-slider/demo-slider-init.ts","src/demo/components/demo-slider/DemoSlider.ts","src/demo/components/input/Input.ts","src/demo/components/checkbox/Checkbox.ts","src/demo/pages/demo-page/index.ts"],"sourcesContent":["import DemoSlider from './DemoSlider';\n\nexport default function demoSlidersInit(): void {\n  const demoSliderContainers = document.querySelectorAll('.js-demo-slider');\n  demoSliderContainers.forEach((item) => {\n    new DemoSlider(item as HTMLElement);\n  });\n}\n","import Input from '../input/Input';\nimport Checkbox from '../checkbox/Checkbox';\n\ntype Config = {\n  limits: {\n    min: number | null;\n    max: number | null;\n  };\n  showValueNote: boolean;\n  step: number | null;\n  vertical: boolean;\n  double: boolean;\n  from?: number | null;\n  to: number | null;\n}\n\nclass DemoSlider {\n  private inputsArray: HTMLInputElement[] = [];\n\n  private parent: HTMLElement;\n\n  private currentValueInstance!: Input;\n\n  private minValueInstance!: Input;\n\n  private maxValueInstance!: Input;\n\n  private noteValueInstance!: Checkbox;\n\n  private stepInstance!: Input;\n\n  private verticalInstance!: Checkbox;\n\n  private doubleInstance!: Checkbox;\n\n  private fromInstance!: Input;\n\n  private toInstance!: Input;\n\n  private initOptions!: Config;\n\n  private options!: Config;\n\n  private adslider!: HTMLElement | null;\n\n  constructor(parent: HTMLElement) {\n    this.parent = parent;\n    this.init();\n    this.setInitOptionsForSlider();\n    this.initPlugin();\n    this.getSliderOptions();\n    this.updatePanel();\n    this.addListeners();\n  }\n\n  private init(): void {\n    this.adslider = this.parent.querySelector('.js-demo-slider__adslider');\n    const minValueElement = this.parent.querySelector('.js-demo-slider__minimum-value');\n    const maxValueElement = this.parent.querySelector('.js-demo-slider__maximum-value');\n    const currentValueElement = this.parent.querySelector('.js-demo-slider__current-value');\n    const stepElement = this.parent.querySelector('.js-demo-slider__step');\n    const fromElement = this.parent.querySelector('.js-demo-slider__from');\n    const toElement = this.parent.querySelector('.js-demo-slider__to');\n    const noteValueElement = this.parent.querySelector('.js-demo-slider__note-value');\n    const verticalElement = this.parent.querySelector('.js-demo-slider__vertical-view');\n    const doubleElement = this.parent.querySelector('.js-demo-slider__double');\n    if (minValueElement) {\n      this.minValueInstance = new Input(minValueElement);\n      this.inputsArray.push(this.minValueInstance.getInputElement());\n    }\n    if (maxValueElement) {\n      this.maxValueInstance = new Input(maxValueElement);\n      this.inputsArray.push(this.maxValueInstance.getInputElement());\n    }\n    if (currentValueElement) {\n      this.currentValueInstance = new Input(currentValueElement);\n      this.inputsArray.push(this.currentValueInstance.getInputElement());\n    }\n    if (stepElement) {\n      this.stepInstance = new Input(stepElement);\n      this.inputsArray.push(this.stepInstance.getInputElement());\n    }\n    if (fromElement) {\n      this.fromInstance = new Input(fromElement);\n      this.inputsArray.push(this.fromInstance.getInputElement());\n    }\n    if (toElement) {\n      this.toInstance = new Input(toElement);\n      this.inputsArray.push(this.toInstance.getInputElement());\n    }\n    if (noteValueElement) {\n      this.noteValueInstance = new Checkbox(noteValueElement);\n      this.inputsArray.push(this.noteValueInstance.getCheckboxElement());\n    }\n    if (verticalElement) {\n      this.verticalInstance = new Checkbox(verticalElement);\n      this.inputsArray.push(this.verticalInstance.getCheckboxElement());\n    }\n    if (doubleElement) {\n      this.doubleInstance = new Checkbox(doubleElement);\n      this.inputsArray.push(this.doubleInstance.getCheckboxElement());\n    }\n  }\n\n  private setInitOptionsForSlider(): void {\n    this.initOptions = {\n      limits: {\n        min: this.minValueInstance.getValue(),\n        max: this.maxValueInstance.getValue(),\n      },\n      // curValue: this.currentValueInstance.getValue(),\n      showValueNote: this.noteValueInstance.isChecked(),\n      step: this.stepInstance.getValue(),\n      vertical: this.verticalInstance.isChecked(),\n      double: this.doubleInstance.isChecked(),\n      from: this.fromInstance.getValue(),\n      to: this.toInstance.getValue(),\n    };\n  }\n\n  private initPlugin(): void {\n    $('.js-demo-slider__adslider', this.parent).adslider(this.initOptions);\n  }\n\n  private getSliderOptions(): void {\n    this.options = $('.js-demo-slider__adslider', this.parent).adslider(\n      'getOptions',\n    );\n  }\n\n  private updatePanel() {\n    const {\n      // curValue,\n      limits: { min, max },\n      step,\n      from,\n      to,\n      showValueNote,\n      vertical,\n      double,\n    } = this.options;\n    this.toInstance.setValue(to);\n    this.currentValueInstance.setValue(to);\n    this.minValueInstance.setValue(min);\n    this.maxValueInstance.setValue(max);\n    this.stepInstance.setValue(step);\n    if (showValueNote) {\n      this.noteValueInstance.setChecked();\n    }\n    if (vertical) {\n      this.verticalInstance.setChecked();\n    }\n    if (double) {\n      this.doubleInstance.setChecked();\n    }\n    this.fromInstance.setValue(from);\n    // this.setInputsForDouble();\n  }\n\n  private addListeners(): void {\n    this.inputsArray.forEach((item) => {\n      item.addEventListener(\n        'change',\n        this.handleInputChange.bind(this),\n      );\n    });\n    if (this.adslider) {\n      this.adslider.addEventListener(\n        'mousemove',\n        this.updatePanel.bind(this),\n      );\n      this.adslider.addEventListener(\n        'click',\n        this.updatePanel.bind(this),\n      );\n    }\n  }\n\n  private handleInputChange(): void {\n    this.options = {\n      limits: {\n        min: this.minValueInstance.getValue(),\n        max: this.maxValueInstance.getValue(),\n      },\n      step: this.stepInstance.getValue(),\n      showValueNote: this.noteValueInstance.isChecked(),\n      vertical: this.verticalInstance.isChecked(),\n      double: this.doubleInstance.isChecked(),\n      from: this.fromInstance.getValue(),\n      to: this.doubleInstance.isChecked() ? this.toInstance.getValue() : this.currentValueInstance.getValue(),\n    };\n    console.log(this.options);\n    console.log(this.options.to);\n\n    $('.js-demo-slider__adslider', this.parent).adslider(\n      'update',\n      this.options,\n    );\n    this.updatePanel();\n  }\n\n  private setInputsForDouble(): void {\n    if (this.doubleInstance.isChecked()) {\n      this.currentValueInstance.hideInput();\n      this.fromInstance.showInput();\n      this.toInstance.showInput();\n    } else {\n      this.currentValueInstance.showInput();\n      this.fromInstance.hideInput();\n      this.toInstance.hideInput();\n    }\n  }\n}\n\nexport default DemoSlider;\n","class Input {\n  private parent: Element;\n\n  private inputElement!: HTMLInputElement;\n\n  constructor(parent: Element) {\n    this.parent = parent;\n    this.init();\n  }\n\n  private init(): void {\n    this.inputElement = this.parent.querySelector('.js-input__value') as HTMLInputElement;\n  }\n\n  public getInputElement(): HTMLInputElement {\n    return this.inputElement;\n  }\n\n  public getValue(): number | null {\n    if (this.inputElement.value === '') {\n      return null;\n    }\n    return Number(this.inputElement.value);\n  }\n\n  public setValue(value: number | null | undefined): void {\n    if (typeof value === 'number') {\n      this.inputElement.value = String(value);\n    } else {\n      this.inputElement.value = '';\n    }\n  }\n\n  public hideInput(): void {\n    this.inputElement.classList.add('input__value_hidden');\n  }\n\n  public showInput(): void {\n    this.inputElement.classList.remove('input__value_hidden');\n  }\n}\n\nexport default Input;\n","class Checkbox {\n  private parent: Element;\n\n  private checkboxElement!: HTMLInputElement;\n\n  constructor(parent: Element) {\n    this.parent = parent;\n    this.init();\n  }\n\n  private init(): void {\n    this.checkboxElement = this.parent.querySelector('.js-checkbox__value') as HTMLInputElement;\n  }\n\n  public getCheckboxElement(): HTMLInputElement {\n    return this.checkboxElement;\n  }\n\n  public isChecked(): boolean {\n    return this.checkboxElement.checked;\n  }\n\n  public setChecked(): void {\n    this.checkboxElement.checked = true;\n  }\n}\n\nexport default Checkbox;\n","import demoSlidersInit from '../../components/demo-slider/demo-slider-init';\n\ndemoSlidersInit();\n"],"names":["document","querySelectorAll","forEach","item","DemoSlider","$21bac7894ca695be$var$_DemoSlider","$jvJOj","parcelRequire","$c21b61457e01f5a6$var$_Input","$c21b61457e01f5a6$var$_Checkbox","parent","$c21b61457e01f5a6$var$_classCallCheck2","this","$c21b61457e01f5a6$var$_defineProperty2","init","setInitOptionsForSlider","initPlugin","getSliderOptions","updatePanel","addListeners","value","adslider","querySelector","minValueElement","maxValueElement","currentValueElement","stepElement","fromElement","toElement","noteValueElement","verticalElement","doubleElement","minValueInstance","Input","inputsArray","push","getInputElement","maxValueInstance","currentValueInstance","stepInstance","fromInstance","toInstance","noteValueInstance","Checkbox","getCheckboxElement","verticalInstance","doubleInstance","initOptions","limits","min","getValue","max","showValueNote","isChecked","step","vertical","from","to","$","options","_this$options","_this$options$limits","double","setValue","setChecked","_this","addEventListener","handleInputChange","bind","console","log","hideInput","showInput","$a071acb8486d6f69$var$_classCallCheck2","$a071acb8486d6f69$var$_defineProperty2","inputElement","Number","String","classList","add","remove","$87a2543bdde1a0bc$var$_classCallCheck2","$87a2543bdde1a0bc$var$_defineProperty2","checkboxElement","checked"],"version":3,"file":"index.49266e6b.js.map"}