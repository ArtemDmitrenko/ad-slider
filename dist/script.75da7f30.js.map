{"version":3,"sources":["script.js"],"names":["window","addEventListener","EventObserver","observers","observer","push","data","forEach","subscriber","View","model","selector","$el","document","querySelector","render","$adSlider","$sliderLine","$input","$sliderValue","$sliderTable","$roller","addObserver","initdefValue","insertAdjacentHTML","rightEdge","offsetWidth","defValue","range","max","min","alert","textContent","newLeft","Math","round","style","left","value","getValue","Model","options","broadcast","model1","view"],"mappings":"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","file":"script.75da7f30.js","sourceRoot":"../src","sourcesContent":["'use strict';\nwindow.addEventListener('DOMContentLoaded', function() {\n\n  // class Slider {\n  //   constructor(selector, options) {\n  //     this.$el = document.querySelector(selector);\n  //     this.range = (options.range) ? options.range : { min: 0, max: 100 };\n  //     this.defValue = options.defValue;\n  //     // this.displayValue = (options.displayValue) ? options.displayValue : false;\n  //     this.render();\n  //     this.$sliderLine = this.$el.querySelector('.ad-slider__line');\n  //     this.$roller = this.$el.querySelector('.ad-slider__roller');\n  //     this.$sliderValue = this.$el.querySelector('.ad-slider__number');\n  //     this.$sliderTable = this.$el.querySelector('.ad-slider__value');\n  //     this.$input = this.$el.querySelector('.ad-slider__input');\n  //     this.initdefValue();\n  //     this.scroll();\n  //   }\n\n  //   render() {\n  //     this.$el.insertAdjacentHTML('afterbegin', `\n  //     <div class=\"ad-slider__input\"></div>\n  //     <div class=\"ad-slider\">\n  //       <div class=\"ad-slider__line\">\n  //         <div class=\"ad-slider__roller\"></div>\n  //       </div>\n  //       <div class=\"ad-slider__value\">\n  //         <p class=\"ad-slider__number\"></p>\n  //       </div>\n  //     </div>\n  //     `);\n  //   }\n\n  //   scroll() {\n  //     this.$roller.addEventListener('mousedown', e => {\n  //       e.preventDefault();\n  //       const shiftX = e.clientX - this.$roller.getBoundingClientRect().left;\n  //       const mouseMove = e => {\n  //         let newLeft = e.clientX - shiftX - this.$sliderLine.getBoundingClientRect().left;\n  //         let rightEdge = this.$sliderLine.offsetWidth - this.$roller.offsetWidth;\n  //         if (newLeft < 0) {\n  //           newLeft = 0;\n  //         }\n  //         if (newLeft > rightEdge) {\n  //           newLeft = rightEdge;\n  //         }\n  //         this.$roller.style.left = newLeft + 'px';\n  //         const valueOnSlider = Math.round(this.range.min + (this.range.max - this.range.min) * (parseInt(newLeft, 10) / rightEdge));\n  //         this.$sliderValue.textContent = valueOnSlider;\n  //         this.$sliderTable.style.left = newLeft + this.$roller.offsetWidth / 2 + 'px';\n  //         this.$input.value = valueOnSlider;\n  //       };\n\n  //       function mouseUp() {\n  //         document.removeEventListener('mouseup', mouseUp);\n  //         document.removeEventListener('mousemove', mouseMove);\n  //       }\n  //       document.addEventListener('mousemove', mouseMove);\n  //       document.addEventListener('mouseup', mouseUp);\n  //     });\n  //     document.addEventListener('dragstart', () => false);\n  //   }\n\n  //   initdefValue() {\n  //     const rightEdge = this.$sliderLine.offsetWidth - this.$roller.offsetWidth;\n  //     if (this.defValue > this.range.max || this.defValue < this.range.min) {\n  //       alert('Текщее значение введено вне интервала между минимальным и максимальным значением');\n  //     } else {\n  //       this.$sliderValue.textContent = this.defValue;\n  //       const newLeft = Math.round(rightEdge * (this.defValue - this.range.min) / (this.range.max - this.range.min));\n  //       this.$roller.style.left = newLeft + 'px';\n  //       this.$sliderTable.style.left = newLeft + this.$roller.offsetWidth / 2 + 'px';\n  //       this.$input.value = this.defValue;\n  //     }\n  //   }\n  // }\n\n  // const slider = new Slider('.container', {\n  //   range: { min: 10, max: 1000 },\n  //   defValue: 50,\n  //   // displayValue: true\n  // });\n\n  // const slider1 = new Slider('.container1', {\n  //   defValue: 5,\n  //   // displayValue: true\n  // });\n\n  class EventObserver {\n    constructor() {\n      this.observers = [];\n    }\n\n    addObserver(observer) {\n      this.observers.push(observer);\n    }\n    broadcast(data) {\n      this.observers.forEach(subscriber => {\n        subscriber(data);\n      });\n    }\n  }\n\n  class View {\n    constructor(model, selector) {\n      this.model = model;\n      this.$el = document.querySelector(selector);\n      this.render();\n      this.$adSlider = this.$el.querySelector('.ad-slider');\n      this.$sliderLine = this.$el.querySelector('.ad-slider__line');\n      this.$input = this.$el.querySelector('.ad-slider__input');\n      this.$sliderValue = this.$el.querySelector('.ad-slider__number');\n      this.$input = this.$el.querySelector('.example');\n\n      // this.displayValue = (options.displayValue) ? options.displayValue : false;\n      this.$sliderTable = this.$el.querySelector('.ad-slider__value');\n      this.$roller = this.$el.querySelector('.ad-slider__roller');\n      // this.initdefValue();\n      observer.addObserver(() => this.initdefValue());\n    }\n\n    render() {\n      this.$el.insertAdjacentHTML('afterbegin', `\n      <div class=\"ad-slider__input\"></div>\n      <div class=\"ad-slider\">\n        <div class=\"ad-slider__line\">\n          <div class=\"ad-slider__roller\"></div>\n        </div>\n        <div class=\"ad-slider__value\">\n          <p class=\"ad-slider__number\"></p>\n        </div>\n      </div>\n      <input class=\"example\" type=\"text\"></input>\n      `);\n    }\n\n    initdefValue() {\n      const rightEdge = this.$sliderLine.offsetWidth - this.$roller.offsetWidth;\n      if (this.model.defValue > this.model.range.max || this.model.defValue < this.model.range.min) {\n        alert('Текщее значение введено вне интервала между минимальным и максимальным значением');\n      } else {\n        this.$sliderValue.textContent = this.model.defValue;\n        const newLeft = Math.round(rightEdge * (this.model.defValue - this.model.range.min) / (this.model.range.max - this.model.range.min));\n        this.$roller.style.left = newLeft + 'px';\n        this.$sliderTable.style.left = newLeft + this.$roller.offsetWidth / 2 + 'px';\n        this.$input.value = this.model.defValue;\n      }\n    }\n    fillInput() {\n      this.$input.value = this.model.getValue();\n    }\n  }\n\n  class Model {\n    constructor(options) {\n      this.range = (options.range) ? options.range : { min: 0, max: 100 };\n      this.defValue = (options.defValue) ? options.defValue : 50;\n    }\n    get value() {\n      return this.defValue;\n    }\n    set value(value) {\n      this.defValue = value;\n      observer.broadcast();\n    }\n\n\n  }\n\n  const observer = new EventObserver();\n  const model1 = new Model(observer, {\n    range: { min: 0, max: 100 },\n    defValue: 50\n  });\n  const view = new View(model1, '.container');\n\n\n  model1.value = 60;\n\n\n\n\n\n\n\n\n\n\n});"]}