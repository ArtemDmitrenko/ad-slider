{"mappings":"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","sources":["src/demoPage/demoPage.ts","src/main.ts"],"sourcesContent":["import { Config } from '../model/model';\n\nclass DemoPage {\n  private selector: string;\n\n  private $container!: HTMLElement;\n\n  private $inputCurValue!: HTMLInputElement;\n\n  private $inputMinValue!: HTMLInputElement;\n\n  private $inputMaxValue!: HTMLInputElement;\n\n  private $inputShowValue!: HTMLInputElement;\n\n  private $inputStep!: HTMLInputElement;\n\n  private $inputVertical!: HTMLInputElement;\n\n  private $inputDouble!: HTMLInputElement;\n\n  private $inputFrom!: HTMLInputElement;\n\n  private $inputTo!: HTMLInputElement;\n\n  private $curValueOnSlider!: HTMLElement;\n\n  private options!: Config;\n\n  constructor(selector: string) {\n    this.selector = selector;\n    this.findInputs();\n    this.findOptions();\n    this.updatePanel();\n    this.addListeners();\n    this.updateInputFromTo();\n  }\n\n  private findInputs(): void {\n    this.$container = document.querySelector(this.selector) as HTMLElement;\n    if (this.$container) {\n      this.$inputCurValue = this.$container.querySelector('.panel__curValue') as HTMLInputElement;\n      this.$inputMinValue = this.$container.querySelector('.panel__minValue') as HTMLInputElement;\n      this.$inputMaxValue = this.$container.querySelector('.panel__maxValue') as HTMLInputElement;\n      this.$inputShowValue = this.$container.querySelector('.panel__showNoteValue') as HTMLInputElement;\n      this.$inputStep = this.$container.querySelector('.panel__step') as HTMLInputElement;\n      this.$inputVertical = this.$container.querySelector('.panel__verticalView') as HTMLInputElement;\n      this.$inputDouble = this.$container.querySelector('.panel__double') as HTMLInputElement;\n      this.$inputFrom = this.$container.querySelector('.panel__from') as HTMLInputElement;\n      this.$inputTo = this.$container.querySelector('.panel__to') as HTMLInputElement;\n      this.$curValueOnSlider = this.$container.querySelector('.adslider__value') as HTMLElement;\n    }\n  }\n\n  private findOptions(): void {\n    this.options = $(this.selector).adslider('getOptions');\n  }\n\n  private updatePanel() {\n    if (this.$inputCurValue) {\n      this.$inputCurValue.value = String(this.options.curValue);\n    }\n    if (this.$inputMinValue) {\n      this.$inputMinValue.value = String(this.options.limits.min);\n    }\n    if (this.$inputMaxValue) {\n      this.$inputMaxValue.value = String(this.options.limits.max);\n    }\n    if (this.$inputStep) {\n      this.$inputStep.value = String(this.options.step);\n    }\n    if (this.options.showValueNote) {\n      if (this.$inputShowValue) {\n        this.$inputShowValue.setAttribute('checked', 'checked');\n      }\n    }\n    if (this.options.vertical) {\n      if (this.$inputVertical) {\n        this.$inputVertical.setAttribute('checked', 'checked');\n      }\n    }\n    if (this.options.double) {\n      if (this.$inputDouble) {\n        this.$inputDouble.setAttribute('checked', 'checked');\n        if (this.$inputFrom && this.$inputTo) {\n          this.$inputFrom.value = String(this.options.from);\n          this.$inputTo.value = String(this.options.to);\n        }\n      }\n    }\n  }\n\n  private handleInputChange(): void {\n    this.options.curValue = Number(this.$inputCurValue.value);\n    this.options.limits.min = Number(this.$inputMinValue.value);\n    this.options.limits.max = Number(this.$inputMaxValue.value);\n    this.options.step = Number(this.$inputStep.value);\n    this.options.showValueNote = this.$inputShowValue.checked;\n    this.options.vertical = this.$inputVertical.checked;\n    this.options.double = this.$inputDouble.checked;\n    this.options.from = Number(this.$inputFrom.value);\n    this.options.to = Number(this.$inputTo.value);\n    $(this.selector).adslider('update', this.options);\n  }\n\n  private addListeners(): void {\n    this.$inputCurValue.addEventListener('change', this.handleInputChange.bind(this));\n    this.$inputMinValue.addEventListener('change', this.handleInputChange.bind(this));\n    this.$inputMaxValue.addEventListener('change', this.handleInputChange.bind(this));\n    this.$inputShowValue.addEventListener('change', this.handleInputChange.bind(this));\n    this.$inputStep.addEventListener('change', this.handleInputChange.bind(this));\n    this.$inputVertical.addEventListener('change', this.handleInputChange.bind(this));\n    this.$inputDouble.addEventListener('change', this.handleInputChange.bind(this));\n    this.$inputFrom.addEventListener('change', this.handleInputChange.bind(this));\n    this.$inputTo.addEventListener('change', this.handleInputChange.bind(this));\n    this.$curValueOnSlider.addEventListener('DOMSubtreeModified', this.updateCurInput.bind(this));\n    this.$inputDouble.addEventListener('change', this.updateInputFromTo.bind(this));\n  }\n\n  private updateCurInput(): void {\n    this.$inputCurValue.value = this.$curValueOnSlider.textContent as string;\n  }\n\n  private updateInputFromTo(): void {\n    if (this.$inputDouble.checked) {\n      const $noteFrom = this.$container.querySelector('.adslider__note_from') as HTMLElement;\n      const $valueFrom = $noteFrom.querySelector('.adslider__value') as HTMLElement;\n      const $noteTo = this.$container.querySelector('.adslider__note') as HTMLElement;\n      const $valueTo = $noteTo.querySelector('.adslider__value') as HTMLElement;\n      this.updateFromInput($valueFrom);\n      this.updateToInput($valueTo);\n      this.$inputCurValue.style.visibility = 'hidden';\n      this.$inputFrom.style.visibility = 'visible';\n      this.$inputTo.style.visibility = 'visible';\n      $valueFrom.addEventListener('DOMSubtreeModified', this.updateFromInput.bind(this, $valueFrom));\n      $valueTo.addEventListener('DOMSubtreeModified', this.updateToInput.bind(this, $valueTo));\n    } else {\n      this.$inputCurValue.style.visibility = 'visible';\n      this.$inputFrom.style.visibility = 'hidden';\n      this.$inputTo.style.visibility = 'hidden';\n    }\n  }\n\n  private updateFromInput($valueFrom: HTMLElement): void {\n    this.$inputFrom.value = $valueFrom.textContent as string;\n  }\n\n  private updateToInput($valueTo: HTMLElement): void {\n    this.$inputTo.value = $valueTo.textContent as string;\n  }\n}\n\nexport default DemoPage;\n","/* eslint-disable linebreak-style */\r\nimport DemoPage from './demoPage/demoPage';\r\n\r\nconst options1 = {\r\n  limits: { min: -100, max: 100 },\r\n  curValue: 0,\r\n  showValueNote: true,\r\n  step: 30,\r\n};\r\nconst options2 = {\r\n  limits: { min: 0, max: 100 },\r\n  curValue: 85,\r\n  showValueNote: true,\r\n  step: 20,\r\n  double: true,\r\n  from: 40,\r\n  to: 90,\r\n};\r\nconst options3 = {\r\n  limits: { min: 0, max: 1000 },\r\n  curValue: 500,\r\n  showValueNote: true,\r\n  step: 100,\r\n  vertical: true,\r\n};\r\nconst options4 = {\r\n  limits: { min: 0, max: 100 },\r\n  curValue: 85,\r\n  showValueNote: true,\r\n  step: 15,\r\n  double: true,\r\n  from: 40,\r\n  to: 90,\r\n  vertical: true,\r\n};\r\n\r\n$('.js-container1').adslider(options1);\r\n$('.js-container2').adslider(options2);\r\n$('.js-container3').adslider(options3);\r\n$('.js-container4').adslider(options4);\r\n\r\n/* eslint-disable no-new */\r\nnew DemoPage('.js-container1');\r\nnew DemoPage('.js-container2');\r\nnew DemoPage('.js-container3');\r\nnew DemoPage('.js-container4');\r\n"],"names":["DemoPage","selector","$2d7b0c04e08b02bf$var$_classCallCheck","this","findInputs","findOptions","updatePanel","addListeners","updateInputFromTo","value","$container","document","querySelector","$inputCurValue","$inputMinValue","$inputMaxValue","$inputShowValue","$inputStep","$inputVertical","$inputDouble","$inputFrom","$inputTo","$curValueOnSlider","options","$","adslider","String","curValue","limits","min","max","step","showValueNote","setAttribute","vertical","from","to","Number","checked","addEventListener","handleInputChange","bind","updateCurInput","textContent","$valueFrom","$valueTo","updateFromInput","updateToInput","style","visibility","$ca7b339a1b24dc80$var$_demoPage","parcelRequire"],"version":3,"file":"index.ac3cf8df.js.map"}