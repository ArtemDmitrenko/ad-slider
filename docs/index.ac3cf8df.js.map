{"mappings":"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","sources":["src/demoPage/demoPage.ts","src/main.ts"],"sourcesContent":["import { IConfig } from '../model/model';\n\nclass DemoPage {\n  private selector: string;\n\n  private $container!: HTMLElement;\n\n  private $inputCurValue!: HTMLInputElement;\n\n  private $inputMinValue!: HTMLInputElement;\n\n  private $inputMaxValue!: HTMLInputElement;\n\n  private $inputShowValue!: HTMLInputElement;\n\n  private $inputStep!: HTMLInputElement;\n\n  private $inputVertical!: HTMLInputElement;\n\n  private $inputDouble!: HTMLInputElement;\n\n  private $inputFrom!: HTMLInputElement;\n\n  private $inputTo!: HTMLInputElement;\n\n  private $curValueOnSlider!: HTMLElement;\n\n  private options!: IConfig;\n\n  constructor(selector: string) {\n    this.selector = selector;\n    this.findInputs();\n    this.findOptions();\n    this.updatePanel();\n    this.addListeners();\n    this.updateInputFromTo();\n  }\n\n  private findInputs(): void {\n    this.$container = document.querySelector(this.selector) as HTMLElement;\n    if (this.$container) {\n      this.$inputCurValue = this.$container.querySelector('.panel__curValue') as HTMLInputElement;\n      this.$inputMinValue = this.$container.querySelector('.panel__minValue') as HTMLInputElement;\n      this.$inputMaxValue = this.$container.querySelector('.panel__maxValue') as HTMLInputElement;\n      this.$inputShowValue = this.$container.querySelector('.panel__showNoteValue') as HTMLInputElement;\n      this.$inputStep = this.$container.querySelector('.panel__step') as HTMLInputElement;\n      this.$inputVertical = this.$container.querySelector('.panel__verticalView') as HTMLInputElement;\n      this.$inputDouble = this.$container.querySelector('.panel__double') as HTMLInputElement;\n      this.$inputFrom = this.$container.querySelector('.panel__from') as HTMLInputElement;\n      this.$inputTo = this.$container.querySelector('.panel__to') as HTMLInputElement;\n      this.$curValueOnSlider = this.$container.querySelector('.adslider__value') as HTMLElement;\n    }\n  }\n\n  private findOptions(): void {\n    this.options = $(this.selector).adslider('getOptions');\n  }\n\n  private updatePanel() {\n    if (this.$inputCurValue) {\n      this.$inputCurValue.value = String(this.options.curValue);\n    }\n    if (this.$inputMinValue) {\n      this.$inputMinValue.value = String(this.options.limits.min);\n    }\n    if (this.$inputMaxValue) {\n      this.$inputMaxValue.value = String(this.options.limits.max);\n    }\n    if (this.$inputStep) {\n      this.$inputStep.value = String(this.options.step);\n    }\n    if (this.options.showValueNote) {\n      if (this.$inputShowValue) {\n        this.$inputShowValue.setAttribute('checked', 'checked');\n      }\n    }\n    if (this.options.vertical) {\n      if (this.$inputVertical) {\n        this.$inputVertical.setAttribute('checked', 'checked');\n      }\n    }\n    if (this.options.double) {\n      if (this.$inputDouble) {\n        this.$inputDouble.setAttribute('checked', 'checked');\n        if (this.$inputFrom && this.$inputTo) {\n          this.$inputFrom.value = String(this.options.from);\n          this.$inputTo.value = String(this.options.to);\n        }\n      }\n    }\n  }\n\n  private handleInputChange(): void {\n    this.options.curValue = Number(this.$inputCurValue.value);\n    this.options.limits.min = Number(this.$inputMinValue.value);\n    this.options.limits.max = Number(this.$inputMaxValue.value);\n    this.options.step = Number(this.$inputStep.value);\n    this.options.showValueNote = this.$inputShowValue.checked;\n    this.options.vertical = this.$inputVertical.checked;\n    this.options.double = this.$inputDouble.checked;\n    this.options.from = Number(this.$inputFrom.value);\n    this.options.to = Number(this.$inputTo.value);\n    $(this.selector).adslider('update', this.options);\n  }\n\n  private addListeners(): void {\n    this.$inputCurValue.addEventListener('change', this.handleInputChange.bind(this));\n    this.$inputMinValue.addEventListener('change', this.handleInputChange.bind(this));\n    this.$inputMaxValue.addEventListener('change', this.handleInputChange.bind(this));\n    this.$inputShowValue.addEventListener('change', this.handleInputChange.bind(this));\n    this.$inputStep.addEventListener('change', this.handleInputChange.bind(this));\n    this.$inputVertical.addEventListener('change', this.handleInputChange.bind(this));\n    this.$inputDouble.addEventListener('change', this.handleInputChange.bind(this));\n    this.$inputFrom.addEventListener('change', this.handleInputChange.bind(this));\n    this.$inputTo.addEventListener('change', this.handleInputChange.bind(this));\n    this.$curValueOnSlider.addEventListener('DOMSubtreeModified', this.updateCurInput.bind(this));\n    this.$inputDouble.addEventListener('change', this.updateInputFromTo.bind(this));\n  }\n\n  private updateCurInput(): void {\n    this.$inputCurValue.value = this.$curValueOnSlider.textContent as string;\n  }\n\n  private updateInputFromTo(): void {\n    if (this.$inputDouble.checked) {\n      const $noteFrom = this.$container.querySelector('.adslider__note_type_from');\n      let $valueFrom: HTMLElement | null;\n      if ($noteFrom) {\n        $valueFrom = $noteFrom.querySelector('.adslider__value');\n        this.updateFromInputAndAddEventListener($valueFrom);\n      }\n      const $noteTo = this.$container.querySelector('.adslider__note');\n      let $valueTo: HTMLElement | null;\n      if ($noteTo) {\n        $valueTo = $noteTo.querySelector('.adslider__value');\n        this.updateToInputAndAddEventListener($valueTo);\n      }\n      this.$inputCurValue.style.visibility = 'hidden';\n      this.$inputFrom.style.visibility = 'visible';\n      this.$inputTo.style.visibility = 'visible';\n    } else {\n      this.$inputCurValue.style.visibility = 'visible';\n      this.$inputFrom.style.visibility = 'hidden';\n      this.$inputTo.style.visibility = 'hidden';\n    }\n  }\n\n  private updateFromInputAndAddEventListener(el: HTMLElement | null) {\n    if (el) {\n      this.updateFromInput(el);\n      el.addEventListener('DOMSubtreeModified', this.updateFromInput.bind(this, el));\n    }\n  }\n\n  private updateToInputAndAddEventListener(el: HTMLElement | null) {\n    if (el) {\n      this.updateToInput(el);\n      el.addEventListener('DOMSubtreeModified', this.updateToInput.bind(this, el));\n    }\n  }\n\n  private updateFromInput($valueFrom: HTMLElement): void {\n    this.$inputFrom.value = $valueFrom.textContent as string;\n  }\n\n  private updateToInput($valueTo: HTMLElement): void {\n    this.$inputTo.value = $valueTo.textContent as string;\n  }\n}\n\nexport default DemoPage;\n","import DemoPage from './demoPage/demoPage';\n\nconst options1 = {\n  limits: { min: -100, max: 100 },\n  curValue: 0,\n  showValueNote: true,\n  step: 30,\n};\nconst options2 = {\n  limits: { min: -100, max: 100 },\n  curValue: 85,\n  showValueNote: true,\n  step: 20,\n  double: true,\n  from: 40,\n  to: 90,\n};\nconst options3 = {\n  limits: { min: 0, max: 1000 },\n  curValue: 500,\n  showValueNote: true,\n  step: 100,\n  vertical: true,\n};\nconst options4 = {\n  limits: { min: 0, max: 100 },\n  curValue: 85,\n  showValueNote: true,\n  step: 15,\n  double: true,\n  from: 40,\n  to: 90,\n  vertical: true,\n};\n\n$('.js-container1').adslider(options1);\n$('.js-container2').adslider(options2);\n$('.js-container3').adslider(options3);\n$('.js-container4').adslider(options4);\n\nnew DemoPage('.js-container1');\nnew DemoPage('.js-container2');\nnew DemoPage('.js-container3');\nnew DemoPage('.js-container4');\n"],"names":["DemoPage","selector","$2d7b0c04e08b02bf$var$_classCallCheck2","this","$2d7b0c04e08b02bf$var$_defineProperty2","findInputs","findOptions","updatePanel","addListeners","updateInputFromTo","value","$container","document","querySelector","$inputCurValue","$inputMinValue","$inputMaxValue","$inputShowValue","$inputStep","$inputVertical","$inputDouble","$inputFrom","$inputTo","$curValueOnSlider","options","$","adslider","String","curValue","limits","min","max","step","showValueNote","setAttribute","vertical","from","to","Number","checked","addEventListener","handleInputChange","bind","updateCurInput","textContent","$valueFrom","$noteFrom","updateFromInputAndAddEventListener","$valueTo","$noteTo","updateToInputAndAddEventListener","style","visibility","el","updateFromInput","updateToInput","$ca7b339a1b24dc80$var$_demoPage","$jvJOj","parcelRequire"],"version":3,"file":"index.ac3cf8df.js.map"}